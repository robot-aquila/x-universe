TODO

t2-is02: New navigation.
  TODO: проверить, какой код возврата вернет команда стыковки со станцией,
  если на станции нет свободных слотов.

  Скрипт навигации обрабатывает любые типы целей, до которых можно определить
  дистанцию. Результатом работы скрипта будет одна из навигационных констант:
  
  FLRET_ERROR - цель недостижима (уничтожена, нет пути до цели, стыковка
  невозможна, цель слишком быстра, и т.п.);
  FLRET_NEXTFLIGHTSTEP - очередной этап навигации выполнен;
  FLRET_LANDED - осуществлена стыковка (только в режиме стыковки);
  FLRET_TARGETREACHED - цель достигнута (только в режиме следования);
  FLRET_WARPED - цель и корабль оказались в разных секторах по ходу
  внутрисекторной навигации. Фактически соответствует FLRET_NEXTFLIGHTSTEP, но
  позволяет выполнять дополнительную проверку.

  Предусмотрено два режима работы скрипта: режим стыковки и режим следования.
  Выбор одного из этих режимов осуществляется с помощью параметра точности
  следования. Если указана точность, то выбирается режим следования к объекту на
  указанное расстояние. Если точность не указана, то подразумевается режим
  стыковки. Естественно, режим стыковки возможен только для тех целей, которые
  могут обеспечть стыковку корабля (есть техническая возможность, достаточный
  рейтинг, и т.п.). Если выбран режим стыковки но стыковка в принципе
  неосуществима, то скрипт возвращает FLRET_ERROR.
  
  Как и раньше, скрипт навигации разбивает задачу на отдельные этапы, между
  которыми вызывающий скрипт может выполнять различные проверки, связанные со
  спецификой работы. Если навигационный скрипт завершился с кодом
  FLRET_NEXTFLIGHTSTEP или FLRET_WARPED, то скрипт навигации может быть вызван
  повторно для продолжения работы. Цикл может повторяться до тех пор, пока не
  будет будет получен код FLRET_LANDED или FLRET_TARGETREACHED в зависимости от
  режима. Если скрипт возвращает FLRET_ERROR, то безусловно следует прекратить
  работу с целью.
  
  Проблема бесконечного следования за кораблем из-за разности скоростей решается
  следующим образом. Перед началом следования выполняется сохранение дистации.
  Далее осуществляется следование с таймаутом (5 мизур вполне достаточно, что бы
  успеть разогнать самый медленный корабль). Тогда если при FLRET_TIMEOUT
  выяснится, что дистанция не уменьшается, цель признается принципиально не
  достижимой и скрипт возвращает FLRET_ERROR. Если расстояние сократилось, то
  возвращается FLRET_NEXTFLIGHTSTEP. Если по ходу следования цель и корабль
  оказались в разных секторах (например, был перехват управления другим
  скриптом или задача цели предусматривает перемещение в другой сектор), то
  возвращается FLRET_WARPED. В этом случае, проверка необходимости продолжения
  следования возлагается на вызывающий скрипт (например, для дозаправки этого
  делать не нужно).
  
  Если цель находится в другом секторе, то навигация до целевого сектора
  осуществляется единообразно...
  
  
  tests (wwsl.nav.insector):
+  FLRET_ERROR при запуске, если указана некорректная цель;
+  FLRET_WARPED при запуске, если цель в другом секторе;
+  FLRET_ERROR при следовании за кораблем, если нет сближения;
+  FLRET_ERROR при следовании к цели и ее уничтожении на примере контейнера;
+  FLRET_ERROR при стыковке с кораблем, если не поддерживает стыковку;
+  FLRET_ERROR при стыковке со станцией, если нет рейтинга;
+  FLRET_ERROR при стыковке со станцией, если нет возможности;
+  FLRET_TARGETREACHED при следовании за кораблем;
+  тест выравнивания скорости при следовании за кораблем - не выравнивает;
+  FLRET_TARGETREACHED при следовании к астероиду;
+  FLRET_TARGETREACHED при следовании к станции;
+  FLRET_TARGETREACHED при следовании к вратам;
+  FLRET_TARGETREACHED при следовании к контейнеру;
+  FLRET_LANDED при посадке на корабль;
+  FLRET_LANDED при посадке на станцию;
F  FLRET_LANDED при пролете через врата (не позволяет);
+  FLRET_WARPED при пролете цели через врата;
+  FLRET_WARPED при собственном прыжке в другой сектор, когда цель и корабль
   изначально были в одном секторе (тестировать на корабле с включенным SC во
   вражеском секторе, после чего уничтожить врага для завершения программы
   прерывания);
  
  
  bugfixes:

  * При торговле батареями, дроид не пытается распродать все, включая резерв. 


t2-is03:

  * Отрефакторить использование переменных: все вынести в корневой массив.
  Отдельно подмассивы для настроек и отдельно для статистики.

  * Изменить алгоритм таким образом, что бы у дроида были два региона: один для
  осуществления закупки, другой для реализации. Так же добавить скрипт
  конфигурирования, принимающий сектор. Добавить возможность добавлять и
  исключать секторы из регионов.
  
  * Добавить настройки по минимальному объему поставщика и максимальному объему
  покупателя в процентах, при которых станции игнорируются. Добавить их в отчет
  вместе с ограничением по абсолютному количеству.
  
  * Добавить возможность загрузки и разгрузки кораблей. Сделать это возможным,
  только если транспорт находится в регионе загрузки или разгрузки.
  
t2-is04:

  * Заправщик
  * Ремонтник
  * Оружейник
  * Оружейный дилер
  * Торговец
  * Бригадир
  

--------------------------------------------------------------------------------
t2-is01 2013-04-13

  Сейчас этап покупки и продажи выполняются до тех пор, пока не будет найдена
  подходящая станция для операции. Это не позволяет использовать дроида только
  для закупки определенных товаров, так как он остается в цикле продажи после
  первой успешной покупки.
  
  Изменения алгоритма:

  * Попытка купить товар выполняется если свободного места в трюме (за вычетом
  резерва под прыжковый двигатель) достаточно для покупки одной единицы товара.
  Если в трюме нет товара и нет свободного места, то игроку отправляется
  соответствующее сообщение и дроид прекращает работу.

  * При закупке выполняется только одна попытка купить товар. Цикл закупки до
  определенного уровня загрузки теперь не выполняется.
  
  * Попытка продать товар выполняется только в случае если в трюме есть товар.
  
  * При продаже выполняется только одна попытка продать товар. Цикл продажи
  всего товара в трюме теперь не выполняется.
  
  * Добавлена закупка батарей перед стартом со станции в том числе с собственных
  станций, не производящих батареи.
  
  * Добавлена процедура заправки при старте со станции.
  
  KnownBugs:
  
  * При поиске станций не учитывается расовый рейтинг, необходимый для покупки
  товара. Но метода определения рейтинга необходимого для покупки товара не
  существует. В связи с этим, дроид будет тупить в данной ситуации.

